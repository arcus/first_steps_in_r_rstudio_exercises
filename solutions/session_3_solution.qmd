---
title: "Session 3 (Data Visualization With `ggplot2`): Solutions"
format: html
editor: source
---

**Before you make changes to this file, please save it as `session_3_solution_nn.qmd`, where "nn" are your initials. This is so you'll have your own copy with your changes, and you'll still have access to the original if you need it, and be able to get any updates from the GitHub repo without conflicts.**

## Import Data

Information about cirrhosis data: <https://archive.ics.uci.edu/dataset/878/cirrhosis+patient+survival+prediction+dataset-1>

Notice that in the chunk below, after the "r" language specifier in the curly brackets, we've put `warning = FALSE` and `message = FALSE`. These settings can be useful for suppressing messages and warnings you already know are "false alarms" that aren't useful.  

Whenever you want to add a special setting to a chunk, you need to provide the name of the option (like **warning**: should the chunk publish warnings, **message**, should the chunk publish messages, or **echo**, should the chunk publish the code written inside it) followed by an equals sign and the value, like TRUE or FALSE.  If you have more than one, you need commas between each option.

**Your turn 1:** Run the chunk below.

```{r warning = FALSE, message = FALSE}
library(tidyverse)
cirrhosis_study <- read_csv("../data/cirrhosis.csv") 
```

## Making a Histogram

Let's make a histogram of `N_Days`. This variable represents the number of days between participant registration and the earlier of (1) death, (2) transplantation, or (3) study analysis time in July 1986.

For any plot using `ggplot2`, you will need to:

1.  Pick a data set: e.g. `cirrhosis_study`
2.  Choose a geom function describing the kind of plot: e.g. `geom_histogram()`
3.  Map variables in the data frame to aesthetic properties of the graph (visible properties like x location, y location, point shape, line color, or shape fill color). E.g. the `N_Days` variable will map to the x axis location.

**Your turn 2:** Fill in the blanks and run the code to create the plot.

```{r}
ggplot(data = cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days))
```

## Bins / Binwidth

When you run the code block above, you will most likely have what looks like an error displayed above the graph. It will say:

> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

This is actually just a message from R, telling you that it's a bad idea to use a default bin width. This is because we usually want to build a histogram that has bins that "make sense" on a human level.

For example, if you were building a histogram of home sale prices, you might want to see bins that were \$50k wide. If you were creating a histogram of mouse maze completion times in seconds, you might want to make bins that were 60 seconds wide, since 60 seconds is a unit that makes intuitive sense as a unit. If you were making a histogram of students' math grades, you might want to have quartiles or deciles (4 bins or 10 bins) to help separate students into groups. It all depends on what your purposes are and the context of your data.

The `N_Days` variable holds a number of days. What would be an appropriate number of bins or bin width?

**Your turn 3:** In the code chunk below, try experimenting with various values of either `binwidth` or `bins`. Fill in the blanks below to recreate the code from the previous chunk, but this time including the binwidth argument passed to the geom_histogram function. Feel free to run the chunk several times until you see the histogram you like best!

**Pro Tip**: Often, the most important argument for a function (like the `data` argument for `ggplot` or the `mapping` argument for `geom` functions) is assumed to be first, and you can delete the label. So, `ggplot(data = cirrhosis_study)` is the same as `ggplot(cirrhosis_study)`! You can use that to make your code a little shorter, if you want.

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days), 
                 binwidth = 365.25) 

# We chose to make the bin width equal to a year... you might have chosen 
# something different, and that's okay!
```

## Adding Color: Setting

Pro tips:

-   There's lots about color in `ggplot2` here: <https://r-graph-gallery.com/ggplot2-color.html>.
-   In `ggplot2`, the word "color" refers to **points** and **lines**, and the word "fill" refers to 2D **shapes**. If you are trying to color something and it's not working, it might be that what you need to do is replace the word "color" with "fill"!

Let's add some color that does NOT correspond to the data -- it will be the same, no matter what. That's **setting** a color, not **mapping** data values to colors, so our color (in this case, because it's a shape and not a line, we call it "fill") will be **outside** the `aes()` function.

Let's make our histogram purple. A good color of purple in hexadecimal RGB notation is "#AA00FF".

Here's the code, ready to go, with just one empty spot to fill in.

**Your turn 4:** Notice where we've put "fill" -- it's inside the parentheses for `geom_histogram` but it's outside the parentheses for `aes`. Then, add a value for fill. Try "purple" and also try "#AA00CC". Heck, try other colors while you're at it! (And yes, you need quotes...)

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days), 
                 binwidth = 365.25,
                 fill = "#AA00CC") 
```

## Adding Color: Mapping

Let's next add some color that DOES correspond to the data. We'll color our histogram according to how many participants in each bin had hepatomegaly.

**Your turn 5:** Copy and paste the previous code chunk into the blank chunk below and:

-   Remove any place you specified `fill = ...`, and any comma preceding that.
-   Make sure `binwidth` is set to 365.25 (just so we're all on the same page)
-   After your first aesthetic mapping, the one that says `x = N_Days`, add a comma.
-   Hit enter, to get a new line (it just makes it look nice)
-   Add a second aesthetic mapping after your mapping for `x`:
    -   It will be a mapping for `fill` (so, type "fill =")
    -   It will be set to use the `Hepatomegaly` column (so, type "Hepatomegaly").
-   Makes sure both aesthetics are within the `aes()` function (inside its set of parentheses)

(If this all seems like a lot, don't worry, you can steal code from the next chunk down!)

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25) 
```

## Adding a Label

Adding a title or axis labels can make your visualization instantly better!  In our case, "N_Days" isn't very self-explanatory, so let's correct the X-axis label.

**Your turn 6:** Add a descriptive label that is better than N_Days.  If you don't remember what N_Days means, scroll up to the top of this file!

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25) +
  labs(x = "Duration in Study (Days)") # Lots of possible correct answers here!
```

In addition to using axis labels in `labs`, you can also add a title, subtitle, or other labels.  In your console, you can type `?labs` to find out more.

## Choosing colors

When you map colors to discrete values, `ggplot2` will pick colors that are far apart on the color wheel and can be distinguished from one another by most people with ease, but sometimes you might want to specify which colors, and not have it guess. Maybe you want to avoid the color red, for example, or you'd rather have three shades of blue of different intensity.

If you want to use a particular group of colors (a "palette"), there are several different packages that provide color palettes. Here's one way you could specify a palette, using `scale_color_brewer`, which is part of `ggplot2`. Notice that we have to specify a color for missing, or NA, values, in addition to the palette.

**Your turn 7:** Run the chunk below!

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25)  +
  labs(x = "Duration in Study (Days)") +
  scale_fill_brewer(palette = "Pastel1",
                    na.value = "grey70")
```

**Your turn 8:**

Copy the code from the chunk above and paste it below. Instead of "Pastel1", try other palettes from "R Color Brewer". Here are the ones you can choose from:

-   Diverging: BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral
-   Qualitative: Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3
-   Sequential: Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25)  +
  labs(x = "Duration in Study (Days)") +
  scale_fill_brewer(palette = "YlGn",  # I picked this one at random!
                    na.value = "grey70")
```

Maybe you want to be VERY specific and manually put in color definitions. For example, you want to use CHOP colors from our branding standards in your visualization. Here are some colors from our Brand Guidelines:

-   PMS 213 (Pink) = #ED1F7F
-   PMS 298 (Pale Blue) = #41B6E6
-   PMS 377 (Green) = #91A01E
-   PMS 7531 (Brown) = #786452

Here's how we could do that.

**Your turn 9:** Try running the code below. This time there's nothing you have to add or fill in!

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25) +
  scale_fill_manual(values = c("Y" = "#41B6E6",
                               "N" = "#91A01E"),
                    na.value ="#786452")
```

## Positioning Options

This histogram is "stacked", and it is kind of hard to read. It divides each "bin" or "pile" into colors that are stacked, one on top of the other. It's easy to see where the brown, missing value, bin has its peaks, because the brown shape has a flat "floor", so it's easy to see a spike at just after 1000. But the blue and green groups are harder to read. It sure would be nice to have three different histograms independently, instead of having the blue stacked on top of the brown and then the green stacked on top of the brown and the blue!

Let's consider a couple of options. Instead of a "stacked" position, we could have each color be independent. That would mean they would overlap, so we'd need to make each histogram semi-transparent, so we could see through them. Here's how we could do that. We've added two new arguments to our code: `position` and `alpha`.

**Your turn 10:** Try running the code below. This time there's nothing you have to add or fill in! If you want, however, you can try different values between 0 and 1 for alpha, to understand how alpha works.

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25,
                 position = "identity",
                 alpha = 0.5) +
  labs(x = "Duration in Study (Days)") +
  scale_fill_manual(values = c("Y" = "#41B6E6",
                               "N" = "#91A01E"),
                    na.value ="#786452")
```

Oof. That's somehow even worse, because the overlap is so strong that it's really hard to read. This would be a great option if we had histograms that had different ranges (so the overlap wasn't quite so intense), but it's not good here at all. Let's try a different approach -- using position = "dodge".

**Your turn 11:** Copy and paste the previous code chunk above. Remove the `alpha` argument and set the `position` argument to "dodge". Then run the chunk.

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25,
                 position = "dodge") +
  labs(x = "Duration in Study (Days)") +
  scale_fill_manual(values = c("Y" = "#41B6E6",
                               "N" = "#91A01E"),
                    na.value ="#786452")
```

## Faceting

You can also have several plots side-by-side that show the same plot for different parts of your data. Let's try that with our histogram. It will work better for us than other options, since our histogram overlaps the same range for each group.

**Your turn 12:** Try running the code below. This time there's nothing you have to add or fill in! Do notice, however the new last line we added: `facet_wrap`.

```{r}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25,
                 position = "dodge") +
  labs(x = "Duration in Study (Days)") +
  scale_fill_manual(values = c("Y" = "#41B6E6",
                               "N" = "#91A01E"),
                    na.value ="#786452") +
  facet_wrap(vars(Hepatomegaly))
```

There are a couple of ways to facet:

-   `facet_grid` allows you to take two categorical variables (say, sex and race, or sex and case/control), and use those to lay out individual graphs for the different groups of data that end up in each of those overlapping categories.
-   `facet_wrap` allows you to use one categorical variable to show all the different graphs for the different values of that variable.

## Adding / Tweaking Labels

Of course, you want your labels to be useful. Let's expand and do more labeling!  Below, we added some sample better labels both axes, as well as a title and subtitle.

**Your turn 13:** Run the chunk below. Then, change the title and subtitle to suit what you think is best (or remove the subtitle if you prefer). Feel free to alter the axis labels as well.  

Notice that we've added `echo=FALSE` to the chunk options.  That means we won't see all the code if we render this code to an html document.  That can make things look cleaner and less scary to someone who doesn't want to see the code!  We'll do that for the rest of the graphs here, too.

```{r, echo = FALSE}
ggplot(cirrhosis_study) +
  geom_histogram(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25,
                 position = "dodge") +
  scale_fill_manual(values = c("Y" = "#41B6E6",
                               "N" = "#91A01E"),
                    na.value ="#786452") + 
  
  facet_wrap(vars(Hepatomegaly)) +
  labs(
    title = "Study Duration Linked to Hepatomegaly Status",
    subtitle = "Patients negative for hepatomegaly demonstrate more uniform distribution
than patients with positive or unknown status",
    x = "Duration in Study (Days)",
    y = "Number of Subjects"
  )
```

## Quick Aside -- Other Geoms

There are other kinds of plots that we won't get into much today. We'd rather go deep on just one plot rather than broad across many types of plots. But still, it's worth taking a quick look at some examples.

**Your turn 14:** Run the four chunks below to see some other examples!

Example 1: Show boxplots of bilirubin level, separated by disease stage.

```{r echo=FALSE, warning = FALSE, message = FALSE}
ggplot(data = cirrhosis_study) +
  geom_boxplot(mapping = aes(x = Stage,
                             y = Bilirubin, 
                             group = Stage))
```

Example 2: Show a scatterplot of platelets (on the x axis) and albumin (on the y axis) measurements, colored by the sex of the subject.

```{r echo=FALSE, warning = FALSE, message = FALSE}
ggplot(data = cirrhosis_study) +
  geom_point(mapping = aes(x = Platelets,
                           y = Albumin, 
                           color = Sex))
```

Example 3: A probability density estimate (like a smoothed histogram) showing the distribution of N_Days

```{r echo=FALSE, warning = FALSE, message = FALSE}
ggplot(cirrhosis_study) +
  geom_density(mapping = aes(x = N_Days,
                               fill = Hepatomegaly), 
                 binwidth = 365.25,
               alpha = 0.4) +
  scale_fill_manual(values = c("Y" = "#41B6E6",
                               "N" = "#91A01E"),
                    na.value ="#786452")
```

Example 4: A faceted scatterplot of albumin and copper, with points colored by study status, and graphs faceted by treatment.

```{r echo=FALSE, warning = FALSE, message = FALSE}
ggplot(cirrhosis_study) +
  geom_point(aes(x = Albumin, 
                 y = Copper,
                 color=Status),
             alpha = 0.6) +
  facet_wrap(. ~ Drug)
```

**Your Turn 15:** At the top of the screen you should see a button that says "Render" with a blue arrow. Click it to render your document!  If your code is all error-free, you should get a rendered .html document.

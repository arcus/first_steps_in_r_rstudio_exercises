---
title: "Session 4 (Data Selection With `dplyr`): Solutions"
format: html
editor: source
---

**If you make changes to this file, please save it as `session_4_solution_nn.qmd`, where "nn" are your initials. This is so you'll have your own copy with your changes, and you'll still have access to the original if you need it.**

## Load Libraries and Import Data

Information about cirrhosis data: <https://archive.ics.uci.edu/dataset/878/cirrhosis+patient+survival+prediction+dataset-1>

Notice that in the chunks below, after the "r" language specifier in the curly brackets, we've added a unique chunk name, which can help you navigate with your code chunks more easily. Click on the navigation button on the bottom edge of your code viewing pane (it's just to the right of the line and character number indicator that looks like 11:59 or 24:124) to see what we mean! Also note that here, we use hyphens in our chunk names (something we don't suggest for variable names).

**Your turn 1:** Run both chunks below.

```{r load-libraries, warning = FALSE, message = FALSE}
library(tidyverse)
```

```{r ingest-data, warning = FALSE, message = FALSE}
cirrhosis_study <- read_csv("../data/cirrhosis.csv") 
```

## Data Types

`read_csv()` brings data in and makes its best guess about what kind of data each column contains. But sometimes it's wrong, or at least not **totally** correct.

Let's start by looking at the data types in `cirrhosis_study`. You can do that in a couple of ways.

**Your turn 2:** In the Environment pane, click the blue arrow beside the object name `cirrhosis_study`. Beside each column name, after a column, is the data type. How many data types can you identify?

> There are two data types shown: "num", as in `$ ID  : num [1:418]...` and "chr", as in `$ Status  : chr [1:418]...`

**Your turn 3:** Run the code chunk below. You'll see the same information as you did when you expanded the blue triangle!

```{r str-example}
str(cirrhosis_study)
```

There are lots of ways to think about data types. So far, we've seen a very blunt division of types: is something made of numbers only, or from other characters on a keyboard like letters and punctuation?

Something that's numeric in R is usually either an `integer` or a `double` (double-precision floating point decimal... there's a bit of jargon history there but basically when you see "double" it means "decimal").

Something that uses other characters like letters and symbols is often a "character" type in R.

There's also a "logical" data type in R, which includes True and False values (the *values* of True and False, which are often written in all caps -- TRUE and FALSE, not the English words "True" and "False").

**Your turn 4:** Run the following code chunks to see their data types.

```{r typeof-1}
typeof("Apples")
```

```{r typeof-2}
typeof(sqrt(100))
```

```{r typeof-2}
typeof(5 < 3)
```

There are other data types, too, and the most important of these, and it's VERY important, is the **factor** data type.

## Factors

Factors are **categorical** variables (variables with a handful of predictable values that repeat over and over again) that can have a logical order ("small", "medium", "large"; "Monday", "Tuesday", "Wednesday") or not really have a logical order ("male", "female"; "Pennsylvania", "Maryland", "New Jersey").

Sometimes, things that look like numbers are actually factors that are written in code. Some people like to use numbers like 0 and 1 to mean "False" and "True", or things like 0 = Male, 1 = Female, 99 = Unknown. This can be a useful code, but the problem arises when R thinks "oh, this is a numerical signal, something I can use to help build a model." Does a subject of unknown sex have 99 times some quality than a female subject? No! But R might try to use a formula like that in a linear model. Using raw numbers instead of transforming them to factors can be misleading.

And sometimes numbers are used canonically to label a category. Like the category of a hurricane or a ZIP code to categorize location. These use numbers, but if you think about them, you wouldn't do math on them. A ZIP in Nashville (37205) isn't "twice as ZIP" as one in Philadelphia (19104). And while hurricane categories are ordered, so a Category 5 storm is bigger than a Category 3 storm, each category is a broad range. It's not quite like, say, the amplitude-based Richter scale for earthquakes, where the relationship between two different Richter measurements is mathematical. With hurricanes, it's much more like the category of "small", "medium", and "large".

You should transform columns that contain categorical data into factors in R, **especially if they contain numbers.** Let's do that together for Status and Drug to start!

We can use the `mutate` function of `dplyr` to do this.

**Your turn 4:** Run the code chunk below to create a "cleaned" version of the cirrhosis data (that's so we don't overwrite our original data in case we mess up).

```{r factors-1}
cleaned_cirrhosis_study <- cirrhosis_study

cleaned_cirrhosis_study <- cleaned_cirrhosis_study |>
  mutate(Status = factor(Status),
         Drug = factor (Drug))
```

**Your turn 5:**. Use `str()` or the blue triangle in the Environment pane to compare the two very similar data frames `cirrhosis_study` and `cleaned_cirrhosis_study`. What do you notice about `Status` and `Drug` in these two data frames?

> In `cirrhosis_study`, these variables show up as "chr" types, and we can see the first handful of values. In `cleaned_cirrhosis_study`, we see that they are "Factor", and we can see for each one how many unique values there are (there are 3 unique Status levels and 2 unique Drug levels).

**Your turn 6:** Use `View()` or click on the object names in the Environment pane to look at the two very similar data frames `cirrhosis_study` and `cleaned_cirrhosis_study`. What do you notice about `Status` and `Drug` in these two data frames?

> They look the same! Even though the data type changed "under the hood", the way the data looks to a human user feels identical.

**Your turn 7:**. Finish the code chunk below to turn the rest of the categorical data in this data frame into factor data in R. Remember that factor data should consist of a few (3? 5? 25? It depends...) values that repeat over and over again.

```{r factors-2}
cleaned_cirrhosis_study <- cleaned_cirrhosis_study |>
  mutate(Sex = factor(Sex),
         Ascites = factor(Ascites),
         Hepatomegaly = factor(Hepatomegaly),
         Spiders = factor(Spiders),
         Edema = factor(Edema),
         Stage = factor(Stage))
```

## Use `dplyr` Filter and Select

Let's say we want to create a new data frame, `high_cholesterol_females`.

This new data frame should meet two criteria:

-   It must contain a very limited set of values (only `ID`, `Status`, `Stage`, `Age`, `Cholesterol`, and `Bilirubin`, in that order).
-   The participants in this data frame should only be female subjects with cholesterol levels at or above 300.

In this case, it definitely matters the order in which we do our `select` (choosing columns) and `filter` (choosing rows). Can you see why?

> Solution: Why? Well, if we did our `select` first, we would no longer have access to the `Sex` column, which would mean we couldn't do our `filter`. This isn't always the case, but in this case it really matters.

We'll start with filter.

**Your turn 8:** Add two conditions inside the filter and run this chunk. You can either use an explicit "and" with the `&` signal, or you can put a comma between your two conditions, which will act as an "and."

```{r filter}
high_cholesterol_females <- cleaned_cirrhosis_study |>
  filter(Sex == "F", 
         Cholesterol >= 300)
```

**Your turn 9:** Take a look at the `high_cholesterol_females` object

You can do so by:

-   Using `View(high_cholesterol_females)` in a new code chunk (click on the green "+C" button at the top edge of the code viewer pane) or by entering it in the Console
-   Clicking on the object name `high_cholesterol_females` in the Environment pane, which will also run `View(high_cholesterol_females)`)

Are you happy with the filtering? Does it look like you did it correctly (133 rows, 20 columns)?

**Your turn 10:**

Once you're happy with the filtering, copy the code above into the code chunk below, and follow the `filter` statement with a pipe and a `select` statement!

Note that in the solutions file I might use a different pipe than you, or different whitespace than you, or a different "and" than you... lots of things might be different, but if you end up getting 133 rows of 6 columns I bet you did it right.

```{r filter-and-select}
high_cholesterol_females <- cleaned_cirrhosis_study |>
  filter(Sex == "F", 
         Cholesterol >= 300) |>
  select(ID, 
         Status, 
         Stage, 
         Age, 
         Cholesterol,
         Bilirubin)
```

## Use `mutate` to Deal With Data Issues

OK, now your PI is grumpy because the age in `high_cholesterol_females` is measured in days, and who measures age that way? "These are adults," he grumbles, "put their ages in years!" He wants you to replace the Age column that has days with an Age column that has years.

There are many ways to do this. We'll share two possible models that only use the handful of functions we've talked about so far.

Model 1: The "I like to check my work a little at a time" way:

Step 1: Make a new (`my_test`) data frame that has Age and Age_Years columns (or something like that)

Step 2: Eyeball the two age columns side by side to make sure you think it looks right

Step 3: Use `mutate` to revalue any columns you want. For example, you could ask that `Age` be revalued to be the values of `Age_Years`.

Step 4: Look again. Does it look pretty good?

Step 5: Overwrite the existing `high_cholesterol_females` with your testing/experimental data frame, using `select` to indicate the columns you want (or, the ones you DON'T want).

**Your turn 11:** Fill in the missing parts to complete Step 1 and 2 from Model 1 above.

```{r mutate-carefully-step-1-2}
my_test <- high_cholesterol_females |>
  mutate(Age_Years = Age / 365.25)
View(my_test)
```

If you're getting ages in `Age_Years` that range from 26.27789 to 69.34702, you got it!

**Your turn 12:** Fill in the missing parts to complete Step 3 and 4 from Model 1 above.

```{r mutate-carefully-step-3-4}
my_test <- my_test |>
  mutate(Age = Age_Years)
View(my_test)
```

If you're now getting ages in `Age` that range from 26.27789 to 69.34702, you got it!

**Your turn 13:** Fill in the missing parts to complete Step 5 from Model 1 above.

```{r mutate-carefully-step-5}
high_cholesterol_females_model_1 <- my_test |>
  select(-Age_Years)
View(high_cholesterol_females_model_1)
```

Now, if you're feeling brave and have some experience, maybe you don't want to do some of the extra-careful stuff we've done here, saving the old data in its original data frame and making fresh copies to experiment on. That's totally fine and it's your call.

**Your turn 14:** Finish and run the chunk below to create an improved data frame with updated Age column in one fell swoop! Compare the two results... `high_cholesterol_females_model_1` and `high_cholesterol_females_model_2`.

```{r}
high_cholesterol_females_model_2 <- high_cholesterol_females |>
  mutate(Age = Age / 365.25)
```

## Experiment With Group By And Summarize

Here's an example group by / summarise.

**Your turn 15:**. Run this code chunk!

```{r}
cleaned_cirrhosis_study |>
  group_by(Hepatomegaly) |>
  summarize(Mean_Cholesterol = mean(Cholesterol, na.rm = TRUE), 
            Median_Cholesterol = median(Cholesterol, na.rm = TRUE))
```

But what if you wanted to see these values across the groups divided up by sex and hepatomegaly (so, males with hepatomegaly, males without, females with, females without, etc.)? Can you guess how to do that?

**Your turn 16:** Do a bit of experimentation in the code chunk below!

```{r}
cleaned_cirrhosis_study |>
  group_by(Sex,
           Hepatomegaly) |>
  summarize(Mean_Cholesterol = mean(Cholesterol, na.rm = TRUE), 
            Median_Cholesterol = median(Cholesterol, na.rm = TRUE))
```

**Your turn 17:** What if you wanted to add the group size for each group to the information you're gathering? You could add the argument `group_size = n()` to your summarize statement. Give it a shot.

```{r}
cleaned_cirrhosis_study |>
  group_by(Sex,
           Hepatomegaly) |>
  summarize(Mean_Cholesterol = mean(Cholesterol, na.rm = TRUE), 
            Median_Cholesterol = median(Cholesterol, na.rm = TRUE),
            group_size = n())
```

If you wanted to order the resulting table so that the highest mean cholesterol was at the top, and descended as it went down, you could do that. There's a `dplyr` function I haven't explained, called `arrange`.

**Your turn 17:**. Try using the pipe to send your results so far to `arrange(desc(Mean_Cholesterol))`.

```{r}
cleaned_cirrhosis_study |>
  group_by(Sex,
           Hepatomegaly) |>
  summarize(Mean_Cholesterol = mean(Cholesterol, na.rm = TRUE), 
            Median_Cholesterol = median(Cholesterol, na.rm = TRUE),
            group_size = n()) |>
  arrange(desc(Mean_Cholesterol))
```
